server:
  port: 8002

spring:
  #datasource:
  #  url: jdbc:h2:mem:testdb
  #  username: sa
  #  password: sa
  #jpa:
  #  open-in-view: false
  #  show-sql: true
  #  hibernate:
  #    ddl-auto: update
  #  properties:
  #    hibernate:
  #      dialect: org.hibernate.dialect.H2Dialect
  #      format_sql: true
  #h2:
  #  console:
  #    enabled: true
  #    path: /h2-console
  data:
    mongodb:
      host: localhost
      port: 27017
      uri: mongodb://localhost/genre
  rabbitmq:
    username: guest
    password: guest
    host: localhost
    port: 5672
  zipkin:
    base-url: http://localhost:9411/
    enabled: true

message: hello from catalog-service

queue:
  movie:
    name: MovieQueue
  serie:
    name: SerieQueue

management:
  endpoints:
    web:
      exposure:
        include: '*'
  info:
    env:
      enabled: true

info:
  app:
    name: catalog-service
    description: Info del servicio Catalog
    version: 1.0.0

#config eureka client
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    #solo config para los clientes de eureka
  instance:
    hostname: localhost
    instance-id: ${spring.application.name}:${spring.application.instance-id:${random.value}}

#config circuit breaker y reintentos
resilience4j:
  circuitbreaker:
    instances: 
      catalog: 
        allow-health-indicator-to-fail: false #no le permitimos al circuit breaker que nos modifique el estado de nuestra app 
        register-health-indicator: true #permitirle al circuit breaker el endpoint de health de actuator
        sliding-window-type: COUNT_BASED #queremos realizar el analisis en base a una serie de eventos
        sliding-window-size: 5 #definimos la cantidad de eventos que queremos que sucedan antes de realizar el analisis
        failure-rate-threshold: 50 #permitimos un 50% de fallas (50% de 5) antes de pasar a estado abierto
        wait-duration-in-open-state: 15000 #tiempo de espera para pasar a estado medio abierto
        permitted-number-of-calls-in-half-open-state: 3 #cantidad de llamadas que permitimos en estado semi abierto para pasar a cerrado o abierto segun lo que devuelva el analisis
        automatic-transition-from-open-to-half-open-enabled: true #luego de que pasan los 15seg en estado abierto., habilitamos que se pase automaticamente a estado semi abierto
  retry:
    instances:
      catalog:
        max-atempts: 3 #definimos cuantos intentos queremos que se realicen como maximo
        wait-duration: 1000 #cuanto tiempo esperamos entre intento y reintento
        retry-exceptions:
          - feign.FeignException$InternalServerError #el error que dispara los reintentos